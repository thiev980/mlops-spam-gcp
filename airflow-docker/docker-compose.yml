# postgres + CeleryExecutor
services:
  postgres:
    image: postgres:16
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [airflow-net]

  redis:
    image: redis:7
    container_name: airflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [airflow-net]

  airflow-init:
    image: my-airflow:2.9.2
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CELERY__BROKER_URL=${AIRFLOW__CELERY__BROKER_URL}
      - AIRFLOW__CELERY__RESULT_BACKEND=${AIRFLOW__CELERY__RESULT_BACKEND}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./models:/opt/airflow/models
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    entrypoint: ["bash","-lc"]
    command: >
      "airflow db migrate &&
       airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true"
    networks: [airflow-net]

  airflow-webserver:
    image: my-airflow:2.9.2
    container_name: airflow-web
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      airflow-init: { condition: service_completed_successfully }
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE=Europe/Zurich
      - AIRFLOW__CELERY__BROKER_URL=${AIRFLOW__CELERY__BROKER_URL}
      - AIRFLOW__CELERY__RESULT_BACKEND=${AIRFLOW__CELERY__RESULT_BACKEND}
      - MLFLOW_TRACKING_URI=http://mlflow:5002
    user: "${AIRFLOW_UID:-50000}:0"
    ports: ["8080:8080"]
    volumes:
      - ./dags:/opt/airflow/dags
      - ./models:/opt/airflow/models
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./mlruns:/opt/airflow/mlruns
    command: webserver
    networks: [airflow-net]

  airflow-scheduler:
    image: my-airflow:2.9.2
    container_name: airflow-scheduler
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      airflow-init: { condition: service_completed_successfully }
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CELERY__BROKER_URL=${AIRFLOW__CELERY__BROKER_URL}
      - AIRFLOW__CELERY__RESULT_BACKEND=${AIRFLOW__CELERY__RESULT_BACKEND}
      - LLM_PROVIDER=openai
      - LLM_ENDPOINT=https://api.openai.com/v1/chat/completions
      - LLM_MODEL=gpt-4o-mini
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MLFLOW_TRACKING_URI=http://mlflow:5002
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./models:/opt/airflow/models
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./mlruns:/opt/airflow/mlruns
    command: scheduler
    networks: [airflow-net]

  airflow-worker:
    image: my-airflow:2.9.2
    container_name: airflow-worker
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      airflow-init: { condition: service_completed_successfully }
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CELERY__BROKER_URL=${AIRFLOW__CELERY__BROKER_URL}
      - AIRFLOW__CELERY__RESULT_BACKEND=${AIRFLOW__CELERY__RESULT_BACKEND}
      - LLM_PROVIDER=openai
      - LLM_ENDPOINT=https://api.openai.com/v1/chat/completions
      - LLM_MODEL=gpt-4o-mini
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MLFLOW_TRACKING_URI=http://mlflow:5002
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./models:/opt/airflow/models
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./mlruns:/opt/airflow/mlruns
    command: celery worker
    networks: [airflow-net]

  grafana:
    image: grafana/grafana:10.4.2
    container_name: airflow-grafana
    depends_on:
      postgres: { condition: service_healthy }
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana-data:/var/lib/grafana
    networks: [airflow-net]

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow   # enthÃ¤lt: RUN pip install psycopg2-binary
    container_name: mlflow
    depends_on:
      postgres: { condition: service_healthy }
    ports: ["5002:5002"]
    environment:
      - MLFLOW_ARTIFACTS_DESTINATION=/mlartifacts
    volumes:
      - ./mlartifacts:/mlartifacts
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5002
      --backend-store-uri postgresql+psycopg2://airflow:airflow@postgres/mlflowdb
      --serve-artifacts
      --artifacts-destination /mlartifacts
    networks: [airflow-net]

# <<< HIER ist die fehlende Root-Definition >>>
networks:
  airflow-net:
    name: airflow-net